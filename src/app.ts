import { App } from "@slack/bolt";
import * as dotenv from "dotenv";
import { summarizeThread } from "./utils/openRouter";
import { getThreadMessages, postSummaryToThread } from "./utils/thread";

dotenv.config();

const app = new App({
  signingSecret: process.env.SLACK_SIGNING_SECRET!,
  token: process.env.SLACK_BOT_TOKEN!,
});

// „Çπ„É©„ÉÉ„Ç∑„É•„Ç≥„Éû„É≥„Éâ„Éè„É≥„Éâ„É©
app.command("/summarize", async ({ command, ack, respond, client, body }) => {
  await ack();

  try {
    // „Ç®„Éï„Çß„É°„É©„É´„É°„ÉÉ„Çª„Éº„Ç∏„ÅßÂá¶ÁêÜ‰∏≠„ÇíÈÄöÁü•
    await respond({
      text: "üìù Ë¶ÅÁ¥Ñ„Çí‰ΩúÊàê„Åó„Å¶„ÅÑ„Åæ„Åô...",
      response_type: "ephemeral",
    });

    const channelId = command.channel_id;
    // „Ç≥„Éû„É≥„ÉâÂºïÊï∞„Åã„Çâ„Çπ„É¨„ÉÉ„ÉâTS„ÇíÂèñÂæóÔºàÂºïÊï∞„Åå„Å™„ÅÑÂ†¥Âêà„ÅØÁõ¥Êé•„Ç≥„Éû„É≥„Éâ„ÅåÂÆüË°å„Åï„Çå„Åü„ÉÅ„É£„É≥„Éç„É´„ÇíÂØæË±°Ôºâ
    const threadTs = command.text || command.ts;

    // „Çπ„É¨„ÉÉ„Éâ„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂèñÂæó
    const threadText = await getThreadMessages(client, channelId, threadTs);

    // OpenRouter„Åß„Çπ„É¨„ÉÉ„Éâ„ÇíË¶ÅÁ¥Ñ
    const summary = await summarizeThread(threadText);

    // „É¶„Éº„Ç∂„ÉºIDÂèñÂæó
    const userId = body.user_id;

    // „Åæ„ÅöÈùûÂÖ¨Èñã„ÅßË¶ÅÁ¥ÑÁµêÊûú„ÇíË°®Á§∫
    await postSummaryToThread(client, channelId, threadTs, summary, "private");

    // ÂÖ¨Èñã„Åô„Çã„Éú„Çø„É≥‰ªò„Åç„ÅÆÈÄöÁü•
    await respond({
      text: "üìù „Çπ„É¨„ÉÉ„Éâ„ÅÆË¶ÅÁ¥Ñ„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºà„ÅÇ„Å™„Åü„Å†„Åë„Å´Ë°®Á§∫„Åï„Çå„Å¶„ÅÑ„Åæ„ÅôÔºâ",
      response_type: "ephemeral",
      blocks: [
        {
          type: "section",
          text: {
            type: "mrkdwn",
            text: "üìù *„Çπ„É¨„ÉÉ„ÉâË¶ÅÁ¥Ñ„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü*\n\nË¶ÅÁ¥ÑÁµêÊûú„ÅØ„ÅÇ„Å™„Åü„Å†„Åë„Å´Ë°®Á§∫„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ„Çπ„É¨„ÉÉ„Éâ„Å´ÂÖ¨Èñã„Åô„Çã„Åì„Å®„ÇÇ„Åß„Åç„Åæ„Åô„ÄÇ",
          },
        },
        {
          type: "actions",
          block_id: "summary_visibility",
          elements: [
            {
              type: "button",
              text: {
                type: "plain_text",
                text: "„Çπ„É¨„ÉÉ„Éâ„Å´ÂÖ¨Èñã„Åô„Çã",
                emoji: true,
              },
              style: "primary",
              value: `${channelId}:${threadTs}:${encodeURIComponent(summary)}`,
              action_id: "publish_summary_to_thread",
            },
          ],
        },
      ],
    });
  } catch (error) {
    console.error("Ë¶ÅÁ¥ÑÂá¶ÁêÜ„Ç®„É©„Éº:", error);
    await respond({
      text: `„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: ${
        error instanceof Error ? error.message : "‰∏çÊòé„Å™„Ç®„É©„Éº"
      }`,
      response_type: "ephemeral",
    });
  }
});

// ÂÖ¨ÈñãË¶ÅÁ¥Ñ„Éú„Çø„É≥„ÅÆ„Ç¢„ÇØ„Ç∑„Éß„É≥„Éè„É≥„Éâ„É©
app.action("publish_summary_to_thread", async ({ ack, body, client }) => {
  await ack();

  try {
    // @ts-ignore - body„ÅÆÂûãÂÆöÁæ©„ÇíÁ∞°Áï•Âåñ
    const value = body.actions?.[0]?.value;

    if (!value) {
      throw new Error("Ë¶ÅÁ¥Ñ„Éá„Éº„Çø„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì");
    }

    // ÂÄ§„Åã„Çâ„ÉÅ„É£„É≥„Éç„É´ID„ÄÅ„Çπ„É¨„ÉÉ„ÉâTS„ÄÅË¶ÅÁ¥Ñ„ÉÜ„Ç≠„Çπ„Éà„ÇíÂèñÂæó
    const [channelId, threadTs, encodedSummary] = value.split(":");
    const summary = decodeURIComponent(encodedSummary);

    // „Çπ„É¨„ÉÉ„Éâ„Å´ÂÖ¨Èñã„Å®„Åó„Å¶ÊäïÁ®ø
    await postSummaryToThread(client, channelId, threadTs, summary, "public");

    // Á¢∫Ë™ç„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÈÄÅ‰ø°
    // @ts-ignore - body„ÅÆÂûãÂÆöÁæ©„ÇíÁ∞°Áï•Âåñ
    await client.chat.update({
      // @ts-ignore - body„ÅÆÂûãÂÆöÁæ©„ÇíÁ∞°Áï•Âåñ
      channel: body.channel?.id,
      // @ts-ignore - body„ÅÆÂûãÂÆöÁæ©„ÇíÁ∞°Áï•Âåñ
      ts: body.message?.ts,
      text: "‚úÖ Ë¶ÅÁ¥Ñ„Çí„Çπ„É¨„ÉÉ„Éâ„Å´ÂÖ¨Èñã„Åó„Åæ„Åó„Åü",
      blocks: [
        {
          type: "section",
          text: {
            type: "mrkdwn",
            text: "‚úÖ Ë¶ÅÁ¥Ñ„Çí„Çπ„É¨„ÉÉ„Éâ„Å´ÂÖ¨Èñã„Åó„Åæ„Åó„Åü",
          },
        },
      ],
    });
  } catch (error) {
    console.error("Ë¶ÅÁ¥ÑÂÖ¨Èñã„Ç®„É©„Éº:", error);
  }
});

(async () => {
  await app.start(Number(process.env.PORT) || 3000);
  console.log("‚ö°Ô∏è Slack bot is running");
})();
