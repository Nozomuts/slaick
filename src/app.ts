import { App } from "@slack/bolt";
import * as dotenv from "dotenv";
import { summarizeThread } from "./utils/openRouter";
import { getThreadMessages, postSummaryToThread } from "./utils/thread";

dotenv.config();

const app = new App({
  signingSecret: process.env.SLACK_SIGNING_SECRET!,
  token: process.env.SLACK_BOT_TOKEN!,
});

// „Çπ„É©„ÉÉ„Ç∑„É•„Ç≥„Éû„É≥„Éâ„Éè„É≥„Éâ„É©
app.command("/summarize", async ({ command, ack, respond, client }) => {
  await ack();

  try {
    // „Ç®„Éï„Çß„É°„É©„É´„É°„ÉÉ„Çª„Éº„Ç∏„ÅßÂá¶ÁêÜ‰∏≠„ÇíÈÄöÁü•
    await respond({
      text: "üìù Ë¶ÅÁ¥Ñ„Çí‰ΩúÊàê„Åó„Å¶„ÅÑ„Åæ„Åô...",
      response_type: "ephemeral",
    });

    const channelId = command.channel_id;
    // „Ç≥„Éû„É≥„ÉâÂºïÊï∞„Åã„Çâ„Çπ„É¨„ÉÉ„ÉâTS„ÇíÂèñÂæóÔºàÂºïÊï∞„Åå„Å™„ÅÑÂ†¥Âêà„ÅØÁõ¥Êé•„Ç≥„Éû„É≥„Éâ„ÅåÂÆüË°å„Åï„Çå„Åü„ÉÅ„É£„É≥„Éç„É´„ÇíÂØæË±°Ôºâ
    const threadTs = command.text || command.ts;

    // „Çπ„É¨„ÉÉ„Éâ„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂèñÂæó
    const threadText = await getThreadMessages(client, channelId, threadTs);

    // OpenRouter„Åß„Çπ„É¨„ÉÉ„Éâ„ÇíË¶ÅÁ¥Ñ
    const summary = await summarizeThread(threadText);

    // Ë¶ÅÁ¥Ñ„Çí„Çπ„É¨„ÉÉ„Éâ„Å´ÊäïÁ®ø
    await postSummaryToThread(client, channelId, threadTs, summary);
  } catch (error) {
    console.error("Ë¶ÅÁ¥ÑÂá¶ÁêÜ„Ç®„É©„Éº:", error);
    await respond({
      text: `„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: ${
        error instanceof Error ? error.message : "‰∏çÊòé„Å™„Ç®„É©„Éº"
      }`,
      response_type: "ephemeral",
    });
  }
});

(async () => {
  await app.start(Number(process.env.PORT) || 3000);
  console.log("‚ö°Ô∏è Slack bot is running");
})();
